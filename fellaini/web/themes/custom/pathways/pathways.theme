<?php
use Drupal\media_entity\entity\Media;
use Drupal\node\Entity\Node;


/**
 * @file
 * Functions to support theming in the Pattern Lab theme.
 */

/**
 * Implements template_preprocess_image().
 */
function pathways_preprocess_image(&$variables)
{

    // Remove explicit width & height declaration.
    unset($variables['width'], $variables['height'], $variables['attributes']['width'], $variables['attributes']['height']);

}

// adapted from https://github.com/ilrWebServices/gigeconomydata/blob/master/web/themes/custom/freelance/freelance.theme

/**
 * Implements template_preprocess_node().
 * Pepares the image entity for theming
 */
function pathways_preprocess_node(&$variables)
{
    /** @var \Drupal\node\Entity\Node $node */
    $node = &$variables['node'];
    // here's where to put any image fields that are media refrences outside of paragrpahs
    //if ($node->hasField('field_image_reference')) {
    //if ($media_entity = pathways_get_media_entity_from_reference($node->get('field_image_reference')->first())) {
    //$variables['img'] = pathways_get_image_properties_from_media_entity($media_entity);
    //}
    //}
    if ($node->hasField('field_image')) {
        $media_entity = pathways_get_media_entity_from_reference($node->get('field_image')->first());
        $variables['field_image_img'] = pathways_get_image_properties_from_media_entity($media_entity);
    }
    if ($node->hasField('field_pano_image')) {
        $media_entity = pathways_get_media_entity_from_reference($node->get('field_pano_image')->first());
        $variables['field_pano_image_img'] = pathways_get_image_properties_from_media_entity($media_entity);
    }
}

function pathways_preprocess_media(&$variables)
{
    if ($variables['media']->bundle() == 'image') {
        $variables['img'] = pathways_get_image_properties_from_media_entity($variables['media']);
    }
}


/**
 * Implements hook_preprocess_entity().
 */
function pathways_preprocess_page_component_entity(&$variables)
{
    $page_component_entity = &$variables['elements']['#page_component_entity'];
    if ($page_component_entity->hasField('field_pano_image')) {
        $media_entity = pathways_get_media_entity_from_reference($page_component_entity->get('field_pano_image')->first());
        $variables['img'] = pathways_get_image_properties_from_media_entity($media_entity);
    }
    if ($page_component_entity->hasField('field_figure_image')) {
        $media_entity = pathways_get_media_entity_from_reference($page_component_entity->get('field_figure_image')->first());
        $variables['img'] = pathways_get_image_properties_from_media_entity($media_entity);
    }
    if ($page_component_entity->hasField('field_image')) {
        $media_entity = pathways_get_media_entity_from_reference($page_component_entity->get('field_image')->first());
        $variables['img'] = pathways_get_image_properties_from_media_entity($media_entity);
    }

}
/**
 * Implements hook_preprocess_entity().
 */
function pathways_preprocess_paragraph(&$variables)
{
    $paragraph = &$variables['paragraph'];
    if ($paragraph->hasField('field_pano_image')) {
        $media_entity = pathways_get_media_entity_from_reference($paragraph->get('field_pano_image')->first());
        $variables['img'] = pathways_get_image_properties_from_media_entity($media_entity);
    }
    if ($paragraph->hasField('field_photo_text_image')) {
        $media_entity = pathways_get_media_entity_from_reference($paragraph->get('field_photo_text_image')->first());
        $variables['img'] = pathways_get_image_properties_from_media_entity($media_entity);
    }
    if ($paragraph->hasField('field_figure_image')) {
        $media_entity = pathways_get_media_entity_from_reference($paragraph->get('field_figure_image')->first());
        $variables['img'] = pathways_get_image_properties_from_media_entity($media_entity);
    }
    if ($paragraph->hasField('field_image')) {
        $media_entity = pathways_get_media_entity_from_reference($paragraph->get('field_image')->first());
        $variables['img'] = pathways_get_image_properties_from_media_entity($media_entity);
    }
}

/**
 * Takes an entity_reference and returns the media_entity

 * @param  $media_reference
 *
 * @return object the media entity
 */
function pathways_get_media_entity_from_reference($media_reference = null)
{
    if ($media_reference) {
        $media_entity = $media_reference->get('entity')->getTarget();
        return $media_entity;
    }
    return null;
}

/**
 * Takes a media entity and returns a keyed array of entities: file, image, and media.
 *
 * @param $media_entity
 *
 * @return array containing a file, image, and media entity or null
 */
function pathways_get_image_properties_from_media_entity($media_entity)
{
    if ($media_entity) {
        if ($img_entity = $media_entity->get('field_media_image')->first()) {
            if ($file_entity = $img_entity->get('entity')->getTarget()) {
                return [
                    'uri' => $file_entity->get('uri')->getString(),
                    'alt' => $img_entity->get('alt')->getString(),
                    'title' => $img_entity->get('title')->getString(),
                    'caption' => $media_entity->get('field_caption')->value,
                    'credit' => $media_entity->get('field_credit')->value,
                ];
            }
        }
    }
    return null;
}

// here's where to put any field customization stuff
/**
 * Preprocess variables for field templates.
 */
function pathways_preprocess_field(&$variables, $hook)
{
  $vars['theme_hook_suggestions'][] = 'field__' . $variables['element']['#field_type'] . '__' . $variables['element']['#bundle'];
}
/**
 * Implements hook_preprocess_HOOK().
 *
 * Pass block region value to content so this can be used in
 * MYTHEME_theme_suggestions_menu_alter.
 */
function pathways_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
  // Add the block ID as custom attribute to block content, this will be used
  // for menu template suggestions.
  $variables['content']['#attributes']['block'] = $variables['elements']['#id'];
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide region based menu suggestions.
 */
function pathways_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (isset($variables['attributes']['block'])) {
    $block = $variables['attributes']['block'];
    $suggestions[] = 'menu__' . $block;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function pathways_theme_suggestions_field_alter(array &$suggestions, array $variables) {

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    //do some special stuff for section names on modal page
    if ($node->bundle() == 'modal_page') {
        $content_type = $node->bundle();
        $suggestions[] = $suggestions[4] .'__' . $content_type;
    }
    if ($node->bundle() == 'toc_page') {
        $content_type = $node->bundle();
        $suggestions[] = $suggestions[4] .'__' . $content_type;
    }
  }
}

/* Allow is_front to be used on other templates */
function pathways_preprocess(&$variables, $hook) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }
  // Ensure the cache varies correctly (new in Drupal 8.3).
  $variables['#cache']['contexts'][] = 'url.path.is_front';
}

