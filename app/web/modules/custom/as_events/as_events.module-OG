<?php

use Drupal\Core\Routing\RouteMatchInterface;

function as_events_nameize($str,$a_char = array("'","-"," ")){
    // adapted from http://php.net/manual/en/function.ucfirst.php
    //$str contains the complete raw name string
    //$a_char is an array containing the characters we use as separators for capitalization. If you don't pass anything, there are three in there as default.
    $string = strtolower($str);
    foreach ($a_char as $temp){
        $pos = strpos($string,$temp);
        if ($pos){
            //we are in the loop because we found one of the special characters in the array, so lets split it up into chunks and capitalize each one.
            $mend = '';
            $a_split = explode($temp,$string);
            foreach ($a_split as $temp2){
                //capitalize each portion of the string which was separated at a special character
                $mend .= ucfirst($temp2).$temp;
                }
            $string = substr($mend,0,-1);
            }
        }
    return ucfirst($string);
    }

function as_events_get_events_json($events_shown,$keyword_params) {
    //$keyword_params = "cascal";
    $url = "http://cornell.localist.com/api/2/events?days=364&pp={$events_shown}&keyword={$keyword_params}";
    $data = file_get_contents($url);
    $json = json_decode($data, true);
    $event_json = $json['events'];

    return $event_json;
  }

function as_events_format_event_dates($startdate, $enddate) {
    $event_start_date = date_format($startdate,"M d g:i a");
      //check to see if there's an end date
            if ($enddate){
        //don't repeat date if start and end is on same day
              if (date_format($startdate,"M d") == date_format($enddate,"M d")){
                  $event_end_date = date_format($enddate,"g:i a");
              }else{
                  $event_end_date = date_format($enddate,"M d g:i a");
                  }
            $event_formatted_date = $event_start_date ." to ". $event_end_date;
          }else{
            $event_formatted_date = $event_start_date;
              }
      return $event_formatted_date;
  }

function as_events_generate_event_item_markup($event_data) {
    // Deal with localist's funky json structure
    $event = $event_data['event'];
    $event_title = $event['title'];
    $event_location = $event['location_name'];
    $event_room = $event['room_number'];
    //dates and times
    $event_start_date = date_create($event['event_instances'][0]['event_instance']['start']);
    if ($event['event_instances'][0]['event_instance']['end']) {
    $event_end_date = date_create($event['event_instances'][0]['event_instance']['end']);
        }else{
    $event_end_date = NULL;
        }
    $event_formatted_date = as_events_format_event_dates($event_start_date,$event_end_date);
    //$event_description = strtok(strip_tags($event['description']),'.');
    $event_description = strip_tags($event['description']);
    $event_image = $event['photo_url'];
    // Create the markup



    $markup = "<main>
                <h1>${event_title}</h1>
                <h2>${event_formatted_date}</h2>";
    if ($event_location){
    $markup = $markup . "<h3>" . $event_location . ": " .$event_room. "</h3>";
        }
    if ($event_description){
    $markup = $markup . "<p>" . $event_description . "</p>";
        }
    $markup = $markup ."
            </main>
            <aside>
                <img src= '${event_image}' alt= '${event_title}' />
            </aside>
            \n";

    return $markup;
  }

function as_events_generate_events_view($event_json) {
    $event_count = 1;
    $events_shown = 0;
    $events = array();

    if (!empty($event_json)) {
      $events[] = array('#markup' => '<main>');
      foreach($event_json as $event_data) {
        if ($event_count <= $events_shown || $events_shown == 0) {
          $markup = as_events_generate_event_item_markup($event_data, $event_count);
          $markup = "some markup";
          // Add the markup to the render array
          $events[] = array('#markup' => $markup);
          $event_count++;
        }

      }
    $events[] = array('#markup' => '</main>');
    } // There were no events
    else {
      $events[] = array('#markup' => '<p>There are no upcoming events for this category.</p>');
    }

    return $events;
  }

/**
 * Implements hook_help().
 */
function as_events_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.as_events':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The A&S Events module provides various blocks of upcoming events from Localist.') . '</p>';

      return $output;
  }
}
